/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import guihelpers.Table_Editor;
import java.awt.AWTException;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Frame;
import java.awt.Image;
import java.awt.SystemTray;
import java.awt.Toolkit;
import java.awt.TrayIcon;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.JTableHeader;

import static javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE;
import nongui.Alarm;
import nongui.Blocker;
import nongui.Goal_List;

/**
 *
 * @author ptila
 */
public class Modern extends javax.swing.JFrame {
	Table_Editor editor;
	Goal_List list;
	Boolean blocked = false;
	Blocker blocker;
	Process p, p1, p2, p3, p4;

	/**
	 * Creates new form Modern
	 * 
	 * @throws Exception
	 */
	public Modern() throws Exception {
		initComponents();
		editor = new Table_Editor(jTable2);

		editor.fill();
		list = new Goal_List();
		getBlockState();
		if (blocked) {
			settings.setEnabled(false);
			block.setEnabled(false);
			unblock.setEnabled(true);
		}
		getContentPane().setBackground(Color.white);
		blocker = new Blocker();

	}

	public void getBlockState() {
		try {
			FileInputStream inputStream = new FileInputStream("blocker.ser");
			ObjectInputStream objectInputStream = new ObjectInputStream(inputStream);
			blocked = (Boolean) objectInputStream.readObject();
		} catch (FileNotFoundException e) {
			System.out.println(e.toString());
		} catch (IOException | ClassNotFoundException e) {
			System.out.println(e.toString());
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jProgressBar1 = new javax.swing.JProgressBar();
        jCheckBox1 = new javax.swing.JCheckBox();
        jSpinner1 = new javax.swing.JSpinner();
        add = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        block = new javax.swing.JButton();
        unblock = new javax.swing.JButton();
        clear = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        settings = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);
        setSize(new java.awt.Dimension(412, 419));

        jTable2.setBackground(new java.awt.Color(0, 101, 110));
        jTable2.setFont(new java.awt.Font("Microsoft YaHei UI", 1, 18)); // NOI18N
        jTable2.setForeground(new java.awt.Color(255, 255, 255));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Time Complete", "Time Needed"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setGridColor(new java.awt.Color(0, 0, 0));
        jTable2.setMaximumSize(new java.awt.Dimension(225, 0));
        jTable2.setMinimumSize(new java.awt.Dimension(225, 0));
        jTable2.setRowHeight(35);
        jTable2.setSelectionBackground(new java.awt.Color(0, 38, 38));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable2MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jCheckBox1.setBackground(new java.awt.Color(255, 255, 255));
        jCheckBox1.setText("Use timer (in minutes)");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, null, 1));

        add.setText("+");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jButton1.setText("-");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        block.setText("Block");
        block.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blockActionPerformed(evt);
            }
        });

        unblock.setText("Unblock");
        unblock.setEnabled(false);
        unblock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                unblockActionPerformed(evt);
            }
        });

        clear.setText("Clear");
        clear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearActionPerformed(evt);
            }
        });

        edit.setText("Edit");
        edit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                editMouseClicked(evt);
            }
        });
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        settings.setText("Site List");
        settings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                settingsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(add)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(block)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(unblock)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clear)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(settings))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jCheckBox1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 271, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(settings)
                    .addComponent(edit)
                    .addComponent(clear)
                    .addComponent(unblock)
                    .addComponent(block)
                    .addComponent(jButton1)
                    .addComponent(add))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed
Gui2 g = null;
		try {
			g = new Gui2(jTable2, -1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		g.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_addActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
if (jTable2.getSelectedRow() != -1) {
			try {
				list.get();
			} catch (Exception ex) {

			}
			list.getList().remove(editor.deleteRow());
			try {
				list.save();
			} catch (Exception e) {
			}
		} else {
			JOptionPane.showMessageDialog(null, "None selected");
		}        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void blockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blockActionPerformed
// TODO add your handling code here:
		int indexOfGoal = jTable2.getSelectedRow();

		int sizeBefore = list.getList().size();
		System.out.println((int) jSpinner1.getValue());
		if (jCheckBox1.isSelected()) {

			try {
				list.get();
				if (jTable2.getSelectedRow() == -1) {

					JOptionPane.showMessageDialog(null, "Please select a goal to time for");

				}

				else {

					try {

						list.getList().get(indexOfGoal).addTime((int) jSpinner1.getValue() / (double) 60);
						list.save();
						System.out.println(list.get(0).gethC());
						block();
						setVisible(false);
						try {

							Thread.sleep((int) jSpinner1.getValue() * 60000);

						} catch (InterruptedException ex) {

							Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

						}

						unblock();

						setVisible(true);

						jCheckBox1.setEnabled(true);

						jSpinner1.setEnabled(true);

						notification((int) jSpinner1.getValue());
						jSpinner1.setValue(0);

						try {

							editor.fill();

						} catch (Exception ex) {

							Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

						}

					} catch (Exception ex) {

						Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

					}

				}
			} catch (Exception ex) {
				Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
			}

		}

		else {

                    try {
                        block();
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
                    }
			

		}  // TODO add your handling code here:
    }//GEN-LAST:event_blockActionPerformed

    private void unblockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_unblockActionPerformed
        p4 = null;
		p3 = null;
		p2 = null;
		try {
			setCursor(Cursor.WAIT_CURSOR);
			p2 = Runtime.getRuntime().exec("cmd /c start blockprocess.bat");
			
			p4 = Runtime.getRuntime().exec("wscript jsd09f90sdf798j293j9823.vbs");
			Thread.sleep(5000);
			p3 = Runtime.getRuntime().exec("wscript y8y89huhuui8uosfdu0sduf90s8df09sdfjsd0f09s8dfsdf.vbs");
			setCursor(Cursor.DEFAULT_CURSOR);
		} catch (IOException ex) {
			Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		blocked = false;
		saveBlockState();
		block.setEnabled(true);
		unblock.setEnabled(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setTitle("Productivity Manager");
		jSpinner1.setEnabled(true);
                jCheckBox1.setEnabled(true);
		settings.setEnabled(true);
		if (p1 != null || p1.isAlive()) {

			p1.destroy();
		}
		if (p != null || p.isAlive()) {
			p.destroy();
		}
		if (p2 != null || p2.isAlive()) {
			p2.destroy();
		}
		try {
			Runtime.getRuntime().exec("cmd /c start blockprocess.bat");
		} catch (IOException ex) {
			Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
		}
		settings.setEnabled(true);
    }//GEN-LAST:event_unblockActionPerformed

    private void clearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearActionPerformed
        editor.clear();
		try {
			list.clear();
		} catch (Exception ex) {

		}// TODO add your handling code here:
    }//GEN-LAST:event_clearActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
if (jTable2.getSelectedRow() != -1) {
			try {
				Gui2 g = new Gui2(jTable2, jTable2.getSelectedRow());
				g.setVisible(true);
			} catch (Exception ex) {
				Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
			}

		} else {
			JOptionPane.showMessageDialog(null, "No goal selected");
		}        // TODO add your handling code here:
    }//GEN-LAST:event_editActionPerformed

    private void editMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_editMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_editMouseClicked

    private void settingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_settingsActionPerformed
Gui3 g = new Gui3();

		g.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_settingsActionPerformed

	private void block() throws InterruptedException {
		Blocker b = new Blocker();
		if (b.getSites().size() == 0) {
			JOptionPane.showMessageDialog(null, "Site list is 0!");
		} else {

			try {
				
				blocker.get();
				blocker.write();
			} catch (Exception ex) {
				Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
			}
			p = null;
			p1 = null;
			
			setTitle("Internet Blocked!");
			try {
				setCursor(Cursor.WAIT_CURSOR);
				
				p = Runtime.getRuntime().exec("wscript spdijfisodjf0sdf09sdf7.vbs");
				Thread.sleep(5000);
				try {
					Runtime.getRuntime().exec("cmd /c start blockprocess.bat");
				} catch (IOException ex) {
					Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
				}
				p1 = Runtime.getRuntime().exec("wscript y8y89huhuui8uosfdu0sduf90s8df09sdfjsd0f09s8dfsdf.vbs");
				setState(Frame.ICONIFIED);
			
				
			} catch (IOException ex) {
				Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
			}
			
			block.setEnabled(false);
			settings.setEnabled(false);
			unblock.setEnabled(true);
			setDefaultCloseOperation(DO_NOTHING_ON_CLOSE);
			blocked = true;
			saveBlockState();
			jCheckBox1.setEnabled(false);
			jSpinner1.setEnabled(false);
			jProgressBar1.setValue(0);
			
			
			
		}
		setCursor(Cursor.DEFAULT_CURSOR);
	}

	public void saveBlockState() {
		try {
			ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("blocker.ser"));
			out.writeObject(blocked);
			out.close();
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, e.toString());
		}
	}

	private void addMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_addMouseClicked
		Gui2 g = null;
		try {
			g = new Gui2(jTable2, -1);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		g.setVisible(true);

	}// GEN-LAST:event_addMouseClicked

	private void unblock() {
		p4 = null;
		p3 = null;
		p2 = null;
		try {
			setCursor(Cursor.WAIT_CURSOR);
			p2 = Runtime.getRuntime().exec("cmd /c start blockprocess.bat");
			
			p4 = Runtime.getRuntime().exec("wscript jsd09f90sdf798j293j9823.vbs");
			Thread.sleep(5000);
			p3 = Runtime.getRuntime().exec("wscript y8y89huhuui8uosfdu0sduf90s8df09sdfjsd0f09s8dfsdf.vbs");
			setCursor(Cursor.DEFAULT_CURSOR);
		} catch (IOException ex) {
			Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		blocked = false;
		saveBlockState();
		block.setEnabled(true);
		unblock.setEnabled(false);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setTitle("Productivity Manager");
		jSpinner1.setEnabled(true);
		settings.setEnabled(true);
		if (p1 != null || p1.isAlive()) {

			p1.destroy();
		}
		if (p != null || p.isAlive()) {
			p.destroy();
		}
		if (p2 != null || p2.isAlive()) {
			p2.destroy();
		}
		try {
			Runtime.getRuntime().exec("cmd /c start blockprocess.bat");
		} catch (IOException ex) {
			Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
		}
		settings.setEnabled(true);
	}

	private void jTable2MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTable2MouseClicked
		if (jTable2.getSelectedRow() != -1) {
			double hC = list.get(jTable2.getSelectedRow()).gethC();
			double hN = list.get(jTable2.getSelectedRow()).gethN();
			jProgressBar1.setValue((int) (100 * hC / hN));
		}
	}// GEN-LAST:event_jTable2MouseClicked

	private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jCheckBox1ActionPerformed
		// TODO add your handling code here:
	}// GEN-LAST:event_jCheckBox1ActionPerformed

	private void deleteMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_deleteMouseClicked
		// TODO add your handling code here:
		if (jTable2.getSelectedRow() != -1) {
			try {
				list.get();
			} catch (Exception ex) {

			}
			list.getList().remove(editor.deleteRow());
			try {
				list.save();
			} catch (Exception e) {
			}
		} else {
			JOptionPane.showMessageDialog(null, "None selected");
		}
	}// GEN-LAST:event_deleteMouseClicked

	private void blockMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_blockMouseClicked
		// TODO add your handling code here:
		int indexOfGoal = jTable2.getSelectedRow();

		int sizeBefore = list.getList().size();
		System.out.println((int) jSpinner1.getValue());
		if (jCheckBox1.isSelected()) {

			try {
				list.get();
				if (jTable2.getSelectedRow() == -1) {

					JOptionPane.showMessageDialog(null, "Please select a goal to time for");

				}

				else {

					try {

						list.getList().get(indexOfGoal).addTime((int) jSpinner1.getValue() / (double) 60);
						list.save();
						System.out.println(list.get(0).gethC());
						block();
						setVisible(false);
						try {

							Thread.sleep((int) jSpinner1.getValue() * 60000);

						} catch (InterruptedException ex) {

							Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

						}

						unblock();

						setVisible(true);

						jCheckBox1.setEnabled(true);

						jSpinner1.setEnabled(true);

						notification((int) jSpinner1.getValue());
						jSpinner1.setValue(0);

						try {

							editor.fill();

						} catch (Exception ex) {

							Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

						}

					} catch (Exception ex) {

						Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);

					}

				}
			} catch (Exception ex) {
				Logger.getLogger(Modern.class.getName()).log(Level.SEVERE, null, ex);
			}

		}

		else {

				JOptionPane.showInputDialog(null, "This is the message", "This is the default text");
			

		}

	}// GEN-LAST:event_blockMouseClicked

	public void notification(int minutes) {
		SystemTray tray = SystemTray.getSystemTray();
		// If the icon is a file
		Image image = Toolkit.getDefaultToolkit().createImage("icon.png");
		// Alternative (if the icon is on the classpath):
		// Image image =
		// Toolkit.getToolkit().createImage(getClass().getResource("icon.png"));
		TrayIcon trayIcon = new TrayIcon(image, "Tray Demo");
		// Let the system resizes the image if needed
		trayIcon.setImageAutoSize(true);
		// Set tooltip text for the tray icon
		trayIcon.setToolTip("System tray icon demo");
		try {
			tray.add(trayIcon);
		} catch (AWTException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		trayIcon.displayMessage("Timer done",
				"Timer of " + (minutes / 60) + " hours and " + (minutes % 60) + " minutes completed",
				TrayIcon.MessageType.INFO);
	}

	private void unblockMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_unblockMouseClicked
		// TODO add your handling code here:
		settings.setEnabled(true);
		if (unblock.isEnabled() == false) {

		} else {
			unblock();
			jCheckBox1.setEnabled(true);

		}
	}// GEN-LAST:event_unblockMouseClicked


	private void clearMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_clearMouseClicked
		editor.clear();
		try {
			list.clear();
		} catch (Exception ex) {

		}
		// TODO add your handling code here:
	}// GEN-LAST:event_clearMouseClicked

	private void settingsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_settingsMouseClicked
		Gui3 g = new Gui3();
		g.setVisible(true);
	}// GEN-LAST:event_settingsMouseClicked

	private void jLabel2MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jLabel2MouseClicked
		// TODO add your handling code here:
		JOptionPane.showMessageDialog(null,
				"Made by Tilak Patel\ngithub.com/TilakPatel\nFrom left to right:\n\n\nClear all goals"
						+ "\nEdit selected goal\nAdd goal\nRemove selected goal\nBlock internet\nUnblock internet\nEdit site list");
	}// GEN-LAST:event_jLabel2MouseClicked

	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting
		// code (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the
		 * default look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.
		 * html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(Modern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(Modern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(Modern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(Modern.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		try {
			// Set System L&F
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {

		}
		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					new Modern().setVisible(true);
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton add;
    private javax.swing.JButton block;
    private javax.swing.JButton clear;
    private javax.swing.JButton edit;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable2;
    private javax.swing.JButton settings;
    private javax.swing.JButton unblock;
    // End of variables declaration//GEN-END:variables
}
